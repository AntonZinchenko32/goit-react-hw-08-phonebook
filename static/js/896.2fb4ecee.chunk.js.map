{"version":3,"file":"static/js/896.2fb4ecee.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/index.jsx","components/Filter/Filter.styled.js","components/Filter/index.jsx","components/ContactItem/index.jsx","components/ContactList/index.jsx","Pages/Contacts/Contacts.styled.js","Pages/Contacts/index.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilterQuery = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterQuery],\n  (contacts, filterQuery) => {\n    if (filterQuery === '') return contacts;\n    else {\n      const filtredContacts = contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filterQuery.toLowerCase())\n      );\n\n      return filtredContacts;\n    }\n  }\n);\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: row;\n\n  justify-content: space-around;\n\n  width: 100%;\n  margin-bottom: 40px;\n\n\n  border: 1px solid black;\n`;\n\nexport const Input = styled.input`\n  margin: 15px 0px;\n\n  width: 270px;\n  height: 28px;\n\n  font-size: large;\n`;\n\nexport const SubmitButton = styled.button`\n  margin-top: 20px;\n\n  height: 30px;\n  width: 150px;\n\n  font-size: large;\n  font-weight: 700;\n`;\n","import { nanoid } from 'nanoid';\n// redux\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact, fetchContacts } from 'redux/contacts/operations';\n\nimport { Form, Input, SubmitButton } from './ContactForm.styled';\n\nconst ContactForm = () => {\n  const contactsList = useSelector(selectContacts);\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const dispatch = useDispatch();\n\n  const handleCheck = async (contacts, contactData) => {\n    const { name, number } = contactData;\n    const gotMatch = contacts.find(contact => {\n      return contact.name.toLowerCase() === name.toLowerCase();\n    });\n\n    if (!gotMatch) {\n      await dispatch(addContact({ name, number })).unwrap();\n      dispatch(fetchContacts());\n    } else {\n      alert(`${name} already in list`);\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const form = evt.currentTarget;\n\n    const { nameInput, numberInput } = evt.currentTarget.elements;\n\n    const name = nameInput.value.trim();\n    const number = numberInput.value.trim();\n\n    handleCheck(contactsList, { name, number });\n\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <label htmlFor={nameInputId}>Name</label>\n      <Input\n        id={nameInputId}\n        type=\"text\"\n        name=\"nameInput\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <label htmlFor={numberInputId}>Number</label>\n      <Input\n        id={numberInputId}\n        type=\"tel\"\n        name=\"numberInput\"\n        pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n        title=\"Number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <SubmitButton type=\"submit\">Add contact</SubmitButton>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  margin-bottom: 10px;\n  font-size: 24px;\n`;\n\nexport const Input = styled.input`\n  display: flex;\n  margin: 2px 0 35px 0;\n  width: 250px;\n  height: 28px;\n\n  border-radius: 3px;\n\n  font-size: large;\n`;\n","import { useDispatch } from 'react-redux';\nimport { setFilterQuery } from 'redux/filter/filterSlice';\nimport { nanoid } from 'nanoid';\n\nimport { Label, Input } from './Filter.styled';\n\nconst Filter = () => {\n  const filterInputId = nanoid();\n  const dispatch = useDispatch();\n  return (\n    <>\n      <Label htmlFor={filterInputId}>Find contacts by name</Label>\n      <Input\n        id={filterInputId}\n        onChange={evt => dispatch(setFilterQuery(evt.target.value))}\n      />\n    </>\n  );\n};\n\nexport default Filter;\n","import { useDispatch } from 'react-redux';\n\nimport { deleteContact, fetchContacts } from 'redux/contacts/operations';\n\nimport ListItem from '@mui/material/ListItem';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport ContactPhoneIcon from '@mui/icons-material/ContactPhone';\nimport ListItemText from '@mui/material/ListItemText';\n\nconst ContactItem = ({ name, id, number }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = async () => {\n    await dispatch(deleteContact(id)).unwrap();\n    dispatch(fetchContacts());\n  };\n\n  return (\n    <ListItem\n      secondaryAction={\n        <IconButton\n          onClick={() => handleDelete()}\n          edge=\"end\"\n          aria-label=\"delete\"\n        >\n          <DeleteIcon />\n        </IconButton>\n      }\n    >\n      <ListItemAvatar>\n        <Avatar>\n          <ContactPhoneIcon />\n        </Avatar>\n      </ListItemAvatar>\n      <ListItemText primary={name} secondary={number} />\n    </ListItem>\n  );\n};\n\nexport default ContactItem;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport ContactItem from 'components/ContactItem';\n\n// MUI\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport List from '@mui/material/List';\nimport Grid from '@mui/material/Grid';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  // MUi\n  function generate(element) {\n    return visibleContacts.map(value =>\n      React.cloneElement(element, {\n        key: value.id,\n        name: value.name,\n        number: value.number,\n        id: value.id,\n      })\n    );\n  }\n\n  const Demo = styled('div')(({ theme }) => ({\n    backgroundColor: theme.palette.background.paper,\n  }));\n\n  return (\n    <Box sx={{ flexGrow: 1, maxWidth: 752 }}>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Demo>\n            <List>{generate(<ContactItem />)}</List>\n          </Demo>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin: 15px;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  font-size: 40px;\n  color: #010101;\n`;\n\nexport const Headline = styled.h1`\n  margin: 15px 0;\n  font-size: 42px;\n`;","// React\nimport { useEffect } from 'react';\n// Components\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\nimport { Loader } from 'components/Loader';\n// Styles\nimport { Container, Headline } from './Contacts.styled';\n// Redux\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <ContactForm />\n      <Headline>Contacts</Headline>\n      <Filter />\n      {isLoading && !error && <Loader />}\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","filterQuery","contact","name","toLowerCase","includes","Form","styled","Input","SubmitButton","contactsList","useSelector","nameInputId","nanoid","numberInputId","dispatch","useDispatch","handleCheck","contactData","number","find","addContact","unwrap","fetchContacts","alert","onSubmit","evt","preventDefault","form","currentTarget","elements","nameInput","numberInput","value","trim","reset","htmlFor","id","type","pattern","title","required","Label","filterInputId","onChange","setFilterQuery","target","handleDelete","deleteContact","ListItem","secondaryAction","IconButton","onClick","edge","Delete","ListItemAvatar","Avatar","ContactPhone","ListItemText","primary","secondary","visibleContacts","element","Demo","backgroundColor","theme","palette","background","paper","Box","sx","flexGrow","maxWidth","Grid","container","spacing","item","xs","List","map","React","key","Container","Headline","useEffect","Loader"],"sourceRoot":""}